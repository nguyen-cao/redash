name: Docker Image CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Back-end Lint
        run: |
          pip install -r requirements_dev.txt
          ./bin/flake8_tests.sh
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Front-end Test
      shell: bash -l -eo pipefail {0}
      run: |
        echo $NVM_DIR
        nvm ls
        nvm install 14.16.1
        yarn install
        CYPRESS_INSTALL_BINARY=0 PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1 yarn --frozen-lockfile
        yarn test

  build:
    runs-on: ubuntu-latest
    needs: [check, test]
    env:
      ECR_REPO: usedata.io/redash
      IMAGE_TAG: ${{ github.ref_name }}
    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image
      id: docker-build
      run: docker build . --file Dockerfile --tag "$ECR_REPO:$IMAGE_TAG"
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
        role-session-name: RedashGitHubActions
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Create ECR repository if not exist
      run: |
        aws ecr describe-repositories --repository-names ${ECR_REPO} || aws ecr create-repository --repository-name ${ECR_REPO}
    - name: Push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker tag $ECR_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
