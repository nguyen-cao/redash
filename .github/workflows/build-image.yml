name: Docker Image CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Back-end Lint
        run: |
          pip install -r requirements_dev.txt
          ./bin/flake8_tests.sh
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Front-end Test
      shell: bash -l -eo pipefail {0}
      run: |
        echo $NVM_DIR
        nvm ls
        nvm install 14.16.1
        yarn install
        CYPRESS_INSTALL_BINARY=0 PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1 yarn --frozen-lockfile
        yarn test

  build:
    runs-on: ubuntu-latest
    needs: [check, test]
    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image
      id: docker-build
      run: docker build . --file Dockerfile --tag "redash:$GITHUB_REF_NAME"
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-west-2
        role-to-assume: ${{ secrets.GH_ACTIONS_AWS_ROLE }}
        role-session-name: MySessionName
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Create ECR repository if not exist
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPO_NAME: usedata/redash
      run: |
        aws ecr describe-repositories --repository-names ${REPO_NAME} || aws ecr create-repository --repository-name ${REPO_NAME}
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: usedata/redash
        IMAGE_TAG: ${{ github.ref_name }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
